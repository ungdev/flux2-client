@import 'Colors';
@import 'Constants';

/**
 * .container-hide can be used to keep height:100%
 * under a fixed element like .main
 */
html, body, .container-hide {
    margin: 0;
    padding: 0;
    overflow: hidden;
    position: relative;
    height: 100%;
    width: 100%;
}

/**
 * Container under the appbar
 */
.main {
    width: 100%;
    position: fixed;
    top: $AppBarHeight;
    bottom: 0px;
    overflow: auto;
}


/**
 * Floating button used in multiple views
 */
.FloatingButtonContainer {
    margin: 0;
    padding: 0;
    overflow: hidden;
    position: relative;
    height: 100%;
    width: 100%;

    > * {
        overflow: auto;
        position: relative;
        height: 100%;
        width: 100%;
    }
}
.FloatingButton {
    position: absolute;
    right: 36px;
    bottom: 32px;
    height: 56px;
    width: 56px;
}
.FloatingButton--secondary {
    @extend .FloatingButton;
    bottom: 102px;
}

@media only screen and (max-width: $screen-max-xs) {
    .FloatingButton {
       right: 16px;
       bottom:16px;
    }
    .FloatingButton--secondary {
        bottom: 86px;
    }
}

/**
 * Tabs in a dialog
 */
.TabDialog__body {
    padding: 0 !important;
}
.TabDialog__TabsContent {
   padding: 24px;
}

/**
 * ListHeader : title style for a List or a part of a List
 * Can be used with h2,h3,h4
 * Under this element
 */
.ListHeader {
    padding-left: 16px;
    margin-bottom: 0;
}


/**
 * In dialogs delete buttons should be placed on the left of the action bar
 */
.Dialog__DeleteButon {
    float: left;
}


/**
 * Label used over a field. It is usefull for custom fields  or fields that doesn't provide a label
 */
.FieldLabel {
    margin-top: 16px;
    margin-bottom: 5px;
    color: rgba(0, 0, 0, 0.3);
    font-size: 13px;
    display: block;
}


/**
 * Authorise to go back to line on \n in tooltips
 */
.__react_component_tooltip {
    white-space: pre-line;
}

/**
 * Hide/show helper
 */
 @media only screen and (max-width: $screen-max-xs) {
    .hide-xs { display: none !important; }
    .show-sm { display: none !important; }
    .show-md { display: none !important; }
    .show-lg { display: none !important; }
}
@media only screen and (min-width: $screen-min-sm) and (max-width: $screen-max-sm) {
   .hide-sm { display: none !important; }
   .show-xs { display: none !important; }
   .show-md { display: none !important; }
   .show-lg { display: none !important; }
}
@media only screen and (min-width: $screen-min-md) and (max-width: $screen-max-md) {
   .hide-md { display: none !important; }
   .show-xs { display: none !important; }
   .show-sm { display: none !important; }
   .show-lg { display: none !important; }
}
@media only screen and (min-width: $screen-min-lg) {
   .hide-lg { display: none !important; }
   .show-xs { display: none !important; }
   .show-sm { display: none !important; }
   .show-md { display: none !important; }
}

/**
 * Unread arrow on bottom/top of scroll area
 */

.NotificationScrollIndicator {
    position: absolute;
    right: 0;
    z-index: 5;

    > div {
        font-size: 12px;
        text-align: center;
        background: color($red, 600);
        margin: auto;
        color: white;
        padding: 2px 5px;
        margin-right: 24px;
        box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 6px, rgba(0, 0, 0, 0.12) 0px 1px 4px;
    }
}
.NotificationScrollIndicator--top {
    @extend .NotificationScrollIndicator;

    top: 0;
    > div {
        border-bottom-left-radius: 5px;
        border-bottom-right-radius: 5px;
    }
}
.NotificationScrollIndicator--bottom {
    @extend .NotificationScrollIndicator;

    bottom: 0;
    > div {
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }
}


// List item with a toggle inside (but reacting like a normal clickable list item)
.ToggleListItem {
    padding-right: 20px !important;
    > div > div {
        padding-top: 8px !important;
        padding-bottom: 8px !important;
    }
}
