/**
 * This file define Error types used in the application
 */


/**
 * Error returned when API answer an error, because Error generated by io.socket request
 * contain only the status code and body. This one will contain status code, correct error
 * message according to body. (if there is one)
 */
export class ApiError extends Error {

    /**
     * constructor
     *
     * @param  {type} jwres Object return by io.socket request
     */
    constructor(jwres) {
        // Default error values
        let message = jwres.statusMessage;
        let code = jwres.statusCode;
        let status = 'UnexpectedError';
        let validationErrors = {};
        let formErrors = {};
        let req = {};

        // Try to parse body
        if(jwres.data) {
            if(jwres.data._error) {
                message = jwres.data._error.message;
                code = jwres.data._error.code;
                status = jwres.data._error.status;
                req = jwres.data._error.req;

                if(status == 'ValidationError' && jwres.data._error.validation) {
                    validationErrors = jwres.data._error.validation;

                    // Parse and translate validation errors (only the first of each field)
                    for (let error of jwres.data._error.validation) {
                        if(!formErrors[error.path]) {
                            switch (error.type) {
                                case 'notNull Violation':
                                    formErrors[error.path] = 'Ce champ est obligatoire.';
                                    break;
                                case 'unique violation':
                                    formErrors[error.path] = 'Un autre élément utilise déjà cette valeur. Veuillez en changer.';
                                    break;
                                case 'Validation error':
                                    switch (error.message) {
                                        case 'Validation notEmpty failed':
                                            formErrors[error.path] = 'Ce champ est obligatoire';
                                            break;
                                        case 'Validation roleExist failed':
                                            formErrors[error.path] = 'Ce role n\'existe pas';
                                            break;
                                        case 'Validation isIP failed':
                                            formErrors[error.path] = 'Cette ip n\'est pas valide';
                                            break;
                                    }
                                    break;
                            }

                        }
                    }

                    // Create formErrors with english text if french doesn't exist
                    for (let error of jwres.data._error.validation) {
                        if(!formErrors[error.path]) {
                            formErrors[error.path] = error.message;
                            console.warn('Validation message not translated. ', error);
                        }
                    }
                }
            }
        }

        // Construct
        super(message);
        this.name = 'ApiError';
        this.code = code;
        this.status = status;
        this.validationErrors = validationErrors;
        this.formErrors = formErrors;
        if(req && Object.keys(req)) this.req = req;
    }
 }
