/**
 * This file define Error types used in the application
 */


/**
 * Error returned when API answer an error, because Error generated by io.socket request
 * contain only the status code and body. This one will contain status code, correct error
 * message according to body. (if there is one)
 */
export class ApiError extends Error {

    /**
     * constructor
     *
     * @param  {type} jwres Object return by io.socket request
     */
    constructor(jwres) {
        // Default error values
        let message = jwres.statusMessage;
        let code = jwres.statusCode;
        let status = 'UnexpectedError';
        let formErrors = {};
        let userFormErrors = {};
        let req = {};

        // Try to parse body
        if(jwres.data) {
            if(jwres.data._error) {
                message = jwres.data._error.message;
                code = jwres.data._error.code;
                status = jwres.data._error.status;
                req = jwres.data._error.req;
            }
            else if(jwres.data.code && jwres.data.code == 'E_VALIDATION') {
                status = 'ValidationError';
                message = jwres.data.details;
                formErrors = jwres.data.invalidAttributes;

                // Parse and translate formErrors
                for (let attr in formErrors) {
                    // Rules are translated only if it has an user meaning.
                    // eg: `required` is translated, but not `string`.
                    // Only the first translated rule is returned
                    for (let error of formErrors[attr]) {
                        if(error.rule === 'required') {
                            userFormErrors[attr] = 'Ce champ est obligatoire';
                            break;
                        }
                        else if(error.rule === 'unique') {
                            userFormErrors[attr] = 'Un autre élément utilise déjà cette valeur. Veuillez en choisir une autre.';
                            break;
                        }
                        else if(error.rule === 'model') {
                            userFormErrors[attr] = 'Cet élément n\'a pas pus être trouvé.';
                            break;
                        }
                    }

                    // If not translated, use the english version with a warning
                    if(!userFormErrors[attr]) {
                        userFormErrors[attr] = formErrors[attr][0].message;
                        console.warn('Validation message not translated. ', formErrors[attr]);
                    }
                }
            }
        }

        // Construct
        super(message);
        this.name = 'ApiError';
        this.code = code;
        this.status = status;
        this.formErrors = formErrors;
        this.userFormErrors = userFormErrors;
        if(req && Object.keys(req)) this.req = req;
    }
 }
